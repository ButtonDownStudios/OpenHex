apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'

mainClassName='openhex.run.Test'

repositories {
    jcenter()
    
    //Uncomment this if you install local dependencies.
    //mavenLocal()

    //Uncomment this if you use external dependencies
    mavenCentral()

    //Uncomment this if you use jme3-niftygui
    //maven{url 'http://nifty-gui.sourceforge.net/nifty-maven-repo'}
}

ext.jmeVersion = "3.1.0-beta1"

dependencies {
    
    compile "org.jmonkeyengine:jme3-core:$jmeVersion"
    compile "org.jmonkeyengine:jme3-desktop:$jmeVersion"
    compile "org.jmonkeyengine:jme3-lwjgl:$jmeVersion"
    compile "org.encog:encog-core:3.3.0"
    

	compile "com.simsilica:zay-es:1.2.1"

    //Those are jme3 additional library uncomment the ones you need
    //compile "org.jmonkeyengine:jme3-android-native:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-android:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-bullet-native-android:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-blender:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-bullet-native:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-bullet:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-effects:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-jogg:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-jogl:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-lwjgl3:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-networking:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-plugins:$jmeVersion"
    //compile "org.jmonkeyengine:jme3-terrain:$jmeVersion"
    
    //You need to uncomment nifty repository in the repositories section if you use this dependency
    //compile "org.jmonkeyengine:jme3-niftygui:$jmeVersion"
    
    //runtime project(':assets')
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

task createDirs << {
	def pkg = 'openhex'
    	def dirs = [
        	file("./src/main/java/$pkg"),
		file("./src/main/resources"),
		file("./assets/Interface"),
		file("./assets/MatDefs"),
		file("./assets/Materials"),
		file("./assets/Models"),
		file("./assets/Scenes"),
		file("./assets/Shaders"),
		file("./assets/Sounds"),
		file("./assets/Textures"),
    	]

	dirs.each {
        	if( !it.exists() ) {
            		println "Creating " + it
            		it.mkdirs()
        	}
        	if( it.listFiles().length == 0 ) {
            		def stub = new File(it, 'removeme.txt')
            		println "Creating stub file to allow git checkin, file:$stub"
            		stub.text = "Remove me when there are files here."
       		}
    	}
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
			srcDir 'src/run/java'
		}
	}
}

jar {
  manifest {
    attributes(
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      'Main-Class': 'openhex.run.Test'
    )
  }
}
